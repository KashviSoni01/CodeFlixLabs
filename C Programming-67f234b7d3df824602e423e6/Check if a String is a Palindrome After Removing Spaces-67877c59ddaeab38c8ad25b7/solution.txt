[{"code":"#include <stdio.h>\r\n#include <string.h>\r\nvoid reverse(char str[]) {\r\n    int i,len=strlen(str);\r\n    for (int i=0; i<len/2; i++) {\r\n        int temp=str[i];\r\n        str[i]=str[len-1-i];\r\n        str[len-1-i]=temp;\r\n    }\r\n}\r\nint main() {\r\n    char str[100], str1[100];\r\n    scanf(\"%[^\\n]s\", str);\r\n    strcpy(str1, str);\r\n    reverse(str);\r\n    if (strcmp(str1, str)==0) {\r\n        printf(\"Yes\");\r\n    }\r\n    else {\r\n        printf(\"No\");\r\n    }\r\n}","language":"c","time":"2025-05-09T10:41:30.530Z","isCorrect":false},{"code":"#include <stdio.h>\r\n#include <ctype.h>\r\n#include <string.h>\r\n\r\nint isPalindrome(char str[]) {\r\n    char cleaned[1000];\r\n    int j = 0;\r\n\r\n    // Step 1: Remove spaces and convert to lowercase\r\n    for (int i = 0; str[i] != '\\0'; i++) {\r\n        if (str[i] != ' ') {\r\n            cleaned[j++] = tolower(str[i]);\r\n        }\r\n    }\r\n    cleaned[j] = '\\0';  // Null-terminate the cleaned string\r\n\r\n    // Step 2: Check if cleaned string is a palindrome\r\n    int left = 0;\r\n    int right = j - 1;\r\n    while (left < right) {\r\n        if (cleaned[left] != cleaned[right]) {\r\n            return 0;  // Not a palindrome\r\n        }\r\n        left++;\r\n        right--;\r\n    }\r\n    return 1;  // Is a palindrome\r\n}\r\n\r\nint main() {\r\n    char str[1000];\r\n    scanf(\"%[^\\n]\", str);  // Read entire line\r\n\r\n    if (isPalindrome(str)) {\r\n        printf(\"Yes\");\r\n    } else {\r\n        printf(\"No\");\r\n    }\r\n\r\n    return 0;\r\n}\r\n","language":"c","time":"2025-05-09T11:19:09.211Z","isCorrect":true}]